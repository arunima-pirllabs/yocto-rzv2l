From 89a14c89c876d52ba7f1932d73e9c39f1639c776 Mon Sep 17 00:00:00 2001
From: Huynh Thanh Hung <hung.huynh.wz@renesas.com>
Date: Tue, 15 Nov 2022 12:41:25 +0700
Subject: [PATCH] vspmfilter: Try to get physical address from dmabuf fd

Sometimes ioctl VTOP of mmngr can not convert virtual address of frame
data to physical address. If the memory is dmabuf, we will try to map
the dmabuf fd to physical address by mmngr import dmabuf feature.

Signed-off-by: Huynh Thanh Hung <hung.huynh.wz@renesas.com>
---
 gstvspmfilter.c | 85 ++++++++++++++++++++++++++++++++++++++++++++++---
 gstvspmfilter.h |  1 +
 2 files changed, 81 insertions(+), 5 deletions(-)

diff --git a/gstvspmfilter.c b/gstvspmfilter.c
index ace41bd..96cfe42 100644
--- a/gstvspmfilter.c
+++ b/gstvspmfilter.c
@@ -92,6 +92,9 @@ static GstFlowReturn gst_vspm_filter_transform_frame (GstVideoFilter * filter,
 
 static void gst_vspm_filter_finalize (GObject * obj);
 
+static void gst_vspm_filter_import_fd (GstMemory *mem, gpointer *out, GQueue *import_list);
+static void gst_vspm_filter_release_fd (GQueue *import_list);
+
 struct _GstBaseTransformPrivate
 {
   /* Set by sub-class */
@@ -827,6 +830,11 @@ gst_vspm_filter_finalize (GObject * obj)
         mmngr_import_end_in_user(vspm_in->vspm[i].dmabuf_pid[j]);
   }
 
+  /* Release the importing to avoid leak FD */
+  gst_vspm_filter_release_fd (space->mmngr_import_list);
+
+  g_queue_free (space->mmngr_import_list);
+
   while (vspm_out->used)
   {
     int i = vspm_out->used - 1;
@@ -909,6 +917,7 @@ gst_vspm_filter_init (GstVspmFilter * space)
   space->outbuf_allocate = FALSE;
   space->use_dmabuf = FALSE;
   space->first_buff = 1;
+  space->mmngr_import_list = g_queue_new();
 
   for (i = 0; i < sizeof(vspm_in->vspm)/sizeof(vspm_in->vspm[0]); i++) {
     for (j = 0; j < GST_VIDEO_MAX_PLANES; j++)
@@ -1009,6 +1018,35 @@ find_physical_address (GstVspmFilter *space, gpointer in_vir1, gpointer *out_phy
   return GST_FLOW_OK;
 }
 
+static void
+gst_vspm_filter_import_fd (GstMemory *mem, gpointer *out, GQueue *import_list)
+{
+  int fd;
+
+  if (gst_is_dmabuf_memory(mem)) {
+    int import_pid;
+    size_t size;
+
+    fd = gst_dmabuf_memory_get_fd (mem);
+    if (R_MM_OK == mmngr_import_start_in_user_ext(&import_pid,
+                                                 &size, (unsigned int *)out,
+                                                 fd, NULL)) {
+      g_queue_push_tail (import_list, GINT_TO_POINTER(import_pid));
+    }
+  }
+}
+
+static void
+gst_vspm_filter_release_fd (GQueue *import_list)
+{
+  int fd;
+  while (!g_queue_is_empty(import_list)) {
+    fd = GPOINTER_TO_INT(g_queue_pop_tail (import_list));
+    if (fd >= 0 )
+      mmngr_import_end_in_user_ext (fd);
+  }
+}
+
 static GstFlowReturn
 gst_vspm_filter_transform_frame (GstVideoFilter * filter,
     GstVideoFrame * in_frame, GstVideoFrame * out_frame)
@@ -1070,6 +1108,8 @@ gst_vspm_filter_transform_frame (GstVideoFilter * filter,
   void *src_addr[ISU_MAX_PLANES] = { 0 };
   void *dst_addr[ISU_MAX_PLANES] = { 0 };
   guint in_n_planes, out_n_planes;
+  GstBuffer *buf;
+  GstMemory *mem;
 
   space = GST_VIDEO_CONVERT_CAST (filter);
   vsp_info = space->vsp_info;
@@ -1078,7 +1118,7 @@ gst_vspm_filter_transform_frame (GstVideoFilter * filter,
       "doing colorspace conversion from %s -> to %s",
       GST_VIDEO_INFO_NAME (&filter->in_info),
       GST_VIDEO_INFO_NAME (&filter->out_info));
- 
+
   vsp_info->gst_format_in = GST_VIDEO_FRAME_FORMAT (in_frame);
   vsp_info->in_width = GST_VIDEO_FRAME_COMP_WIDTH (in_frame, 0);
   vsp_info->in_height = GST_VIDEO_FRAME_COMP_HEIGHT (in_frame, 0);
@@ -1114,19 +1154,49 @@ gst_vspm_filter_transform_frame (GstVideoFilter * filter,
   out_n_planes = GST_VIDEO_FORMAT_INFO_N_PLANES(vspm_out_vinfo);
 
   ret = find_physical_address (space, in_frame->data[0], &src_addr[0]);
-  if (ret != GST_FLOW_OK) return ret;
+  if(!src_addr[0] || ret) {
+    buf = in_frame->buffer;
+    mem = gst_buffer_peek_memory (buf, 0);
+    gst_vspm_filter_import_fd (mem, &src_addr[0], space->mmngr_import_list);
+  }
 
   ret = find_physical_address (space, out_frame->data[0], &dst_addr[0]);
-  if (ret != GST_FLOW_OK) return ret;
+  if (!dst_addr[0] || ret) {
+    buf = out_frame->buffer;
+    mem = gst_buffer_peek_memory (buf, 0);
+    gst_vspm_filter_import_fd (mem, &dst_addr[0], space->mmngr_import_list);
+  }
 
   if (in_n_planes >= 2) {
     ret = find_physical_address (space, in_frame->data[1], &src_addr[1]);
-    if (ret != GST_FLOW_OK) return ret;
+    if (!src_addr[1] || ret) {
+      buf = in_frame->buffer;
+      if (gst_buffer_n_memory(buf) > 1) {
+        /* Make sure we have separate GstMemory for each planar */
+        mem = gst_buffer_peek_memory (buf, 1);
+        gst_vspm_filter_import_fd (mem, &src_addr[1], space->mmngr_import_list);
+      } else {
+        /* We can not find the exactly address for plane 2, return as error */
+        GST_ERROR("Can not find physical address of input buffer for planar 2\n");
+	return GST_FLOW_ERROR;
+      }
+    }
   }
 
   if (out_n_planes >= 2) {
     ret = find_physical_address (space, out_frame->data[1], &dst_addr[1]);
-    if (ret != GST_FLOW_OK) return ret;
+    if(!dst_addr[1] || ret) {
+      buf = out_frame->buffer;
+      if (gst_buffer_n_memory(buf) > 1) {
+        /* Make sure we have separate GstMemory for each planar */
+        mem = gst_buffer_peek_memory (buf, 1);
+        gst_vspm_filter_import_fd (mem, &dst_addr[1], space->mmngr_import_list);
+      } else {
+        GST_ERROR("Can not find physical address of output buffer for planar 2\n");
+        /* We can not find the exactly address for plane 2, return as error */
+	return GST_FLOW_ERROR;
+      }
+    }
   }
 
   if (in_n_planes >= 3 || out_n_planes >= 3) {
@@ -1265,6 +1335,8 @@ gst_vspm_filter_transform_frame (GstVideoFilter * filter,
   ercd = VSPM_lib_Entry(vsp_info->vspm_handle, &vsp_info->jobid, 126, &vspm_ip, (unsigned long)&space->smp_wait, cb_func);
 
   if (ercd) {
+    /* In-case can not process VSPM, we still need release the importing */
+    gst_vspm_filter_release_fd (space->mmngr_import_list);
     printf("VSPM_lib_Entry() Failed!! ercd=%ld\n", ercd);
     return GST_FLOW_ERROR;
   }
@@ -1275,6 +1347,9 @@ gst_vspm_filter_transform_frame (GstVideoFilter * filter,
     out_frame = NULL;
   }
 
+  /* Release the importing to avoid leak FD */
+  gst_vspm_filter_release_fd (space->mmngr_import_list);
+
   return GST_FLOW_OK;
 }
 
diff --git a/gstvspmfilter.h b/gstvspmfilter.h
index 55f0090..0181db9 100644
--- a/gstvspmfilter.h
+++ b/gstvspmfilter.h
@@ -174,6 +174,7 @@ struct _GstVspmFilter {
   Vspm_mmng_ar *vspm_in;
   Vspm_mmng_ar *vspm_out;
   VspmbufArray *vspm_outbuf;
+  GQueue *mmngr_import_list;
   gint first_buff;
   sem_t smp_wait;
 };
-- 
2.17.1

